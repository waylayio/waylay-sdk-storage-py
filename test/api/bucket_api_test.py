# coding: utf-8
"""Waylay Storage api tests.

This code was generated from the OpenAPI documentation of 'Waylay Storage'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import re
from importlib.util import find_spec
from typing import Union
from urllib.parse import quote

import pytest
from pytest_httpx import HTTPXMock
from typeguard import check_type
from waylay.sdk import ApiClient, WaylayClient
from waylay.sdk.api._models import Model
from waylay.services.storage.api import BucketApi
from waylay.services.storage.service import StorageService

from ..types.bucket_listing_stub import BucketListingStub
from ..types.bucket_stub import BucketStub

MODELS_AVAILABLE = (
    True if find_spec("waylay.services.storage.models") is not None else False
)

if MODELS_AVAILABLE:
    from waylay.services.storage.models import (
        Bucket,
        BucketListing,
    )
    from waylay.services.storage.queries.bucket_api import GetQuery, ListQuery


# some mappings that are needed for some <example> interpolations
null, true, false = None, True, False


@pytest.fixture
def bucket_api(waylay_api_client: ApiClient) -> BucketApi:
    return BucketApi(waylay_api_client)


def test_registered(waylay_client: WaylayClient):
    """Test that BucketApi api is registered in the sdk client."""
    assert isinstance(waylay_client.storage.bucket, BucketApi)


def _get_set_mock_response(httpx_mock: HTTPXMock, gateway_url: str, bucket_name: str):
    mock_response = BucketStub.create_json()
    httpx_mock_kwargs = {
        "method": "GET",
        "url": re.compile(f"^{gateway_url}/storage/v1/bucket/{bucket_name}(\\?.*)?"),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_get(service: StorageService, gateway_url: str, httpx_mock: HTTPXMock):
    """Test case for get
    Get Bucket
    """
    # set path params
    bucket_name = "bucket_name_example"

    kwargs = {
        # optionally use GetQuery to validate and reuse parameters
        "query": GetQuery(
            store="store_example",
        ),
    }
    _get_set_mock_response(httpx_mock, gateway_url, quote(str(bucket_name)))
    resp = await service.bucket.get(bucket_name, **kwargs)
    check_type(resp, Union[Bucket,])


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_get_without_types(
    service: StorageService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for get with models not installed
    Get Bucket
    """
    # set path params
    bucket_name = "bucket_name_example"

    kwargs = {
        "query": {
            "store": "store_example",
        },
    }
    _get_set_mock_response(httpx_mock, gateway_url, quote(str(bucket_name)))
    resp = await service.bucket.get(bucket_name, **kwargs)
    check_type(resp, Model)


def _list_set_mock_response(httpx_mock: HTTPXMock, gateway_url: str):
    mock_response = BucketListingStub.create_json()
    httpx_mock_kwargs = {
        "method": "GET",
        "url": re.compile(f"^{gateway_url}/storage/v1/bucket(\\?.*)?"),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_list(service: StorageService, gateway_url: str, httpx_mock: HTTPXMock):
    """Test case for list
    List Buckets
    """
    # set path params
    kwargs = {
        # optionally use ListQuery to validate and reuse parameters
        "query": ListQuery(
            store="store_example",
        ),
    }
    _list_set_mock_response(httpx_mock, gateway_url)
    resp = await service.bucket.list(**kwargs)
    check_type(resp, Union[BucketListing,])


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_list_without_types(
    service: StorageService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for list with models not installed
    List Buckets
    """
    # set path params
    kwargs = {
        "query": {
            "store": "store_example",
        },
    }
    _list_set_mock_response(httpx_mock, gateway_url)
    resp = await service.bucket.list(**kwargs)
    check_type(resp, Model)
