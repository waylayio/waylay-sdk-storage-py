# coding: utf-8
"""Waylay Storage api tests.

This code was generated from the OpenAPI documentation of 'Waylay Storage'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import pytest
from typing import Dict, List, get_args, Union
from typeguard import check_type
from pytest_httpx import HTTPXMock
import json
import sys
import re
from unittest.mock import patch
from importlib import reload
from importlib.util import find_spec
from urllib.parse import quote

from waylay.sdk import ApiClient, WaylayClient
from waylay.sdk.api._models import Model
from waylay.services.storage.api import AboutApi
from waylay.services.storage.service import StorageService

from ..types.tenant_status_report_stub import TenantStatusReportStub

from ..types.http_validation_error_stub import HTTPValidationErrorStub


try:
    from waylay.services.storage.queries.about_api import StatusQuery
    from waylay.services.storage.models import TenantStatusReport

    from waylay.services.storage.models import HTTPValidationError

    MODELS_AVAILABLE = find_spec("waylay.services.storage.models") is not None
except ImportError:
    MODELS_AVAILABLE = False


# some mappings that are needed for some <example> interpolations
null, true, false = None, True, False


@pytest.fixture
def about_api(waylay_api_client: ApiClient) -> AboutApi:
    return AboutApi(waylay_api_client)


def test_registered(waylay_client: WaylayClient):
    """Test that AboutApi api is registered in the sdk client."""
    assert isinstance(waylay_client.storage.about, AboutApi)


def _status_set_mock_response(httpx_mock: HTTPXMock, gateway_url: str):
    mock_response = TenantStatusReportStub.create_json()
    httpx_mock_kwargs = {
        "method": "GET",
        "url": re.compile(f"^{gateway_url}/storage/v1/status(\\?.*)?"),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_status(service: StorageService, gateway_url: str, httpx_mock: HTTPXMock):
    """Test case for status
    Status
    """
    # set path params
    kwargs = {
        # optionally use StatusQuery to validate and reuse parameters
        "query": StatusQuery(
            store="store_example",
            include_buckets=True,
            include_queues=True,
            include_disk_usage=False,
        ),
    }
    _status_set_mock_response(httpx_mock, gateway_url)
    resp = await service.about.status(**kwargs)
    check_type(resp, Union[TenantStatusReport,])


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_status_without_types(
    service: StorageService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for status with models not installed
    Status
    """
    # set path params
    kwargs = {
        "query": {
            "store": "store_example",
            "include_buckets": True,
            "include_queues": True,
            "include_disk_usage": False,
        },
    }
    _status_set_mock_response(httpx_mock, gateway_url)
    resp = await service.about.status(**kwargs)
    check_type(resp, Model)


def _version_set_mock_response(httpx_mock: HTTPXMock, gateway_url: str):
    mock_response = "''"
    httpx_mock_kwargs = {
        "method": "GET",
        "url": re.compile(f"^{gateway_url}/storage/v1/(\\?.*)?"),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_version(
    service: StorageService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for version
    Version
    """
    # set path params
    kwargs = {}
    _version_set_mock_response(httpx_mock, gateway_url)
    resp = await service.about.version(**kwargs)
    check_type(resp, Union[str,])


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_version_without_types(
    service: StorageService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for version with models not installed
    Version
    """
    # set path params
    kwargs = {}
    _version_set_mock_response(httpx_mock, gateway_url)
    resp = await service.about.version(**kwargs)
    check_type(resp, Model)
