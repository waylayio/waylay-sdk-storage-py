# coding: utf-8
"""Waylay Storage model tests.

This code was generated from the OpenAPI documentation of 'Waylay Storage'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.storage.models.bucket_object import BucketObject

    BucketObjectAdapter = TypeAdapter(BucketObject)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

bucket_object_model_schema = json.loads(
    r"""{
  "required" : [ "bucket", "name" ],
  "type" : "object",
  "properties" : {
    "_links" : {
      "title" : " Links",
      "type" : "object",
      "additionalProperties" : {
        "$ref" : "#/components/schemas/_Links"
      }
    },
    "bucket" : {
      "$ref" : "#/components/schemas/Bucket"
    },
    "name" : {
      "title" : "Name",
      "type" : "string"
    },
    "last_modified" : {
      "title" : "Last Modified",
      "type" : "string",
      "format" : "date-time"
    },
    "etag" : {
      "title" : "Etag",
      "type" : "string"
    },
    "size" : {
      "title" : "Size",
      "type" : "integer"
    },
    "content_type" : {
      "title" : "Content Type",
      "type" : "string"
    },
    "is_dir" : {
      "title" : "Is Dir",
      "type" : "boolean",
      "default" : false
    },
    "storage_class" : {
      "title" : "Storage Class",
      "type" : "string"
    },
    "owner_id" : {
      "title" : "Owner Id",
      "type" : "string"
    },
    "owner_name" : {
      "title" : "Owner Name",
      "type" : "string"
    }
  },
  "description" : "Representation of a storage object."
}
""",
    object_hook=with_example_provider,
)
bucket_object_model_schema.update({"definitions": MODEL_DEFINITIONS})

bucket_object_faker = JSF(bucket_object_model_schema, allow_none_optionals=1)


class BucketObjectStub:
    """BucketObject unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return bucket_object_faker.generate()

    @classmethod
    def create_instance(cls) -> "BucketObject":
        """Create BucketObject stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        return BucketObjectAdapter.validate_python(cls.create_json())
