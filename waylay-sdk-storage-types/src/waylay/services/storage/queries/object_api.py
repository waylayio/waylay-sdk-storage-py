# coding: utf-8
"""Waylay Storage query parameters.

This code was generated from the OpenAPI documentation of 'Waylay Storage'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations  # for Python 3.7â€“3.9

from pydantic import (
    ConfigDict,
    StrictBool,
    StrictInt,
    StrictStr,
)
from waylay.sdk.api._models import BaseModel as WaylayBaseModel


def _copy_or_move_query_alias_for(field_name: str) -> str:
    if field_name == "source":
        return "source"
    if field_name == "move":
        return "move"
    if field_name == "store":
        return "store"
    return field_name


class CopyOrMoveQuery(WaylayBaseModel):
    """Model for `copy_or_move` query parameters."""

    source: StrictStr
    move: StrictBool | None = None
    store: StrictStr | None = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_copy_or_move_query_alias_for,
        populate_by_name=True,
    )


def _create_folder_query_alias_for(field_name: str) -> str:
    if field_name == "all":
        return "all"
    if field_name == "store":
        return "store"
    return field_name


class CreateFolderQuery(WaylayBaseModel):
    """Model for `create_folder` query parameters."""

    all: StrictBool | None = None
    store: StrictStr | None = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_create_folder_query_alias_for,
        populate_by_name=True,
    )


def _list_query_alias_for(field_name: str) -> str:
    if field_name == "stat":
        return "stat"
    if field_name == "recursive":
        return "recursive"
    if field_name == "all":
        return "all"
    if field_name == "start_after":
        return "start_after"
    if field_name == "fetch_content_type":
        return "fetch_content_type"
    if field_name == "get_as_attachment":
        return "get_as_attachment"
    if field_name == "max_keys":
        return "max_keys"
    if field_name == "sign":
        return "sign"
    if field_name == "store":
        return "store"
    if field_name == "expiry_days":
        return "expiry_days"
    if field_name == "expiry_hours":
        return "expiry_hours"
    if field_name == "expiry_seconds":
        return "expiry_seconds"
    if field_name == "content_length_min":
        return "content_length_min"
    if field_name == "content_length_max":
        return "content_length_max"
    if field_name == "content_type":
        return "content_type"
    return field_name


class ListQuery(WaylayBaseModel):
    """Model for `list` query parameters."""

    stat: StrictBool | None = None
    recursive: StrictBool | None = None
    all: StrictBool | None = None
    start_after: StrictStr | None = None
    fetch_content_type: StrictBool | None = None
    get_as_attachment: StrictBool | None = None
    max_keys: StrictInt | None = None
    sign: StrictStr | None = None
    store: StrictStr | None = None
    expiry_days: StrictInt | None = None
    expiry_hours: StrictInt | None = None
    expiry_seconds: StrictInt | None = None
    content_length_min: StrictInt | None = None
    content_length_max: StrictInt | None = None
    content_type: StrictStr | None = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_list_query_alias_for,
        populate_by_name=True,
    )


def _remove_query_alias_for(field_name: str) -> str:
    if field_name == "recursive":
        return "recursive"
    if field_name == "all":
        return "all"
    if field_name == "start_after":
        return "start_after"
    if field_name == "max_keys":
        return "max_keys"
    if field_name == "store":
        return "store"
    return field_name


class RemoveQuery(WaylayBaseModel):
    """Model for `remove` query parameters."""

    recursive: StrictBool | None = None
    all: StrictBool | None = None
    start_after: StrictStr | None = None
    max_keys: StrictInt | None = None
    store: StrictStr | None = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_remove_query_alias_for,
        populate_by_name=True,
    )
